// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Employee {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Voter {
  id           Int       @id @default(autoincrement())
  firstname    String?
  lastname     String?
  credential_1 String?
  credential_2 String?
  dateofbirth  DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  society   Society? @relation(fields: [societyId], references: [id])
  societyId Int
}

model SocietyContact {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  society   Society @relation(fields: [societyId], references: [id])
  societyId Int     @unique
}

model Society {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  SocietyContact SocietyContact?
  Voter          Voter[]
  Ballot         Ballot[]
}

model Ballot {
  id           Int      @id @default(autoincrement())
  name         String
  allowWriteIn Boolean
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  society   Society     @relation(fields: [societyId], references: [id])
  societyId Int
  Vote      Vote[]
  Office    Office[]
  Candidate Candidate[]
}

model Office {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  ballot    Ballot      @relation(fields: [ballotId], references: [id])
  ballotId  Int
  Candidate Candidate[]
}

model Candidate {
  id        Int      @id @default(autoincrement())
  firstname String
  lastname  String
  title     String
  image     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  office   Office @relation(fields: [officeId], references: [id])
  officeId Int

  ballot   Ballot @relation(fields: [ballotId], references: [id])
  ballotId Int
}

model Vote {
  id          Int      @id @default(autoincrement())
  voted       Boolean
  result      String
  submit_guid String
  isWriteIn   Boolean
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  ballot   Ballot @relation(fields: [ballotId], references: [id])
  ballotId Int
}
